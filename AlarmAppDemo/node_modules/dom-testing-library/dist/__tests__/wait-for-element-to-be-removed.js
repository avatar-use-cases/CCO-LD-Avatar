"use strict";

require("jest-dom/extend-expect");

var _ = require("../");

var _testUtils = require("./helpers/test-utils");

test('resolves on mutation only when the element is removed', async () => {
  const {
    queryAllByTestId
  } = (0, _testUtils.renderIntoDocument)(`
    <div data-testid="div"></div>
    <div data-testid="div"></div>
  `);
  const divs = queryAllByTestId('div'); // first mutation

  setTimeout(() => {
    divs.forEach(d => d.setAttribute('id', 'mutated'));
  }); // removal

  setTimeout(() => {
    divs.forEach(div => div.parentElement.removeChild(div));
  }, 100); // the timeout is here for two reasons:
  // 1. It helps test the timeout config
  // 2. The element should be removed immediately
  //    so if it doesn't in the first 100ms then we know something's wrong
  //    so we'll fail early and not wait the full timeout

  await (0, _.waitForElementToBeRemoved)(() => queryAllByTestId('div'), {
    timeout: 200
  });
});
test('resolves on mutation if callback throws an error', async () => {
  const {
    getByTestId
  } = (0, _testUtils.renderIntoDocument)(`
  <div data-testid="div"></div>
`);
  const div = getByTestId('div');
  setTimeout(() => {
    div.parentElement.removeChild(div);
  });
  await (0, _.waitForElementToBeRemoved)(() => getByTestId('div'), {
    timeout: 100
  });
});