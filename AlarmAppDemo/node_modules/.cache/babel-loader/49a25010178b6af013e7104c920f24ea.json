{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\src\\\\containers\\\\Welcome\\\\welcome.container.js\";\nimport React, { Component } from 'react';\nimport WelcomePageContent from \"./welcome.component\";\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\nimport $rdf from \"rdflib\";\nvar defaultProfilePhoto = '/img/icon/empty-profile.svg'; // RG - 2019-02-28\n// The store is a local rdf store to hold data retrieved from Solid\n\nvar store = $rdf.graph(); // RG - 2019-02-28\n// Loads the data from a URL into the local store\n\nvar loadFromUrl = function loadFromUrl(url, store) {\n  return new Promise(function (resolve, reject) {\n    var fetcher = new $rdf.Fetcher(store);\n\n    try {\n      fetcher.load(url).then(function (response) {\n        resolve(response.responseText);\n        console.debug(response.responseText);\n        $rdf.parse(response.responseText, store, $rdf.sym(url).uri, \"text/turtle\");\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Prepares a query by converting SPARQL into a Solid query\n\n\nvar prepare = function prepare(qryStr, store) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var query = $rdf.SPARQLToQuery(qryStr, false, store);\n      resolve(query);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Executes a query on the local store\n\n\nvar execute = function execute(qry, store) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"here\");\n    var wanted = qry.vars;\n    var resultAry = [];\n    store.query(qry, function (results) {\n      console.debug(\"here1\");\n\n      if (typeof results === \"undefined\") {\n        reject(\"No results.\");\n      } else {\n        var row = rowHandler(wanted, results);\n        console.debug(row);\n        if (row) resultAry.push(row);\n      }\n    }, {}, function () {\n      resolve(resultAry);\n    });\n  });\n}; // RG - 2019-02-28\n// Puts query results into an array according to the projection\n\n\nvar rowHandler = function rowHandler(wanted, results) {\n  var row = {};\n\n  for (var r in results) {\n    var found = false;\n    var got = r.replace(/^\\?/, \"\");\n\n    if (wanted.length) {\n      for (var w in wanted) {\n        if (got === wanted[w].label) {\n          found = true;\n          continue;\n        }\n      }\n\n      if (!found) continue;\n    }\n\n    row[got] = results[r].value;\n  }\n\n  return row;\n};\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\n\n\nvar WelcomeComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WelcomeComponent, _Component);\n\n  function WelcomeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, WelcomeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WelcomeComponent).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var hasImage, user, nameLd, name, imageLd, image, url1, url2, qryStr;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                isLoading: true\n              });\n\n              /*\n               * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n               * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n               * from the returned user object.\n               */\n              user = data[_this.props.webId];\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              nameLd = _context.sent;\n              name = nameLd ? nameLd.value : '';\n              _context.next = 8;\n              return user.image;\n\n            case 8:\n              imageLd = _context.sent;\n\n              if (!imageLd) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.t0 = imageLd;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return user.vcard_hasPhoto;\n\n            case 15:\n              _context.t0 = _context.sent;\n\n            case 16:\n              imageLd = _context.t0;\n\n              if (imageLd && imageLd.value) {\n                image = imageLd.value;\n                hasImage = true;\n              } else {\n                hasImage = false;\n                image = defaultProfilePhoto;\n              } // RG - 2019-02-28\n              // Load data from two public Solid URLs into the local store, and run a query on the combined data\n              // Put the data into the Component state so that it can be rendered\n              // const url1 = \"https://jacobmcconomy.solid.community/profile/card#me\";\n\n\n              url1 = \"https://theletterj.solid.community/profile/card#me\";\n              url2 = \"https://theletterj.solid.community/public/test.ttl\";\n              qryStr = \"PREFIX cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . SELECT distinct ?name WHERE { ?Person rdf:type cco:Person ; cco:designated_by ?PFN . ?PFN rdf:type cco:PersonFullName; cco:inheres_in ?IBE . ?IBE a cco:InformationBearingEntity ;cco:has_text_value ?name .}\";\n              loadFromUrl(url1, store).then(function () {\n                return loadFromUrl(url2, store).then(function () {\n                  return prepare(qryStr, store).then(function (qry) {\n                    return execute(qry, store).then(function (results) {\n                      console.debug(results);\n\n                      _this.setState({\n                        results: results\n                      });\n                    });\n                  });\n                });\n              });\n              console.debug(\"Completed load and query\");\n              /**\n               * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n               * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n               * it's missing, you can manually add it like we're doing here.\n               *\n               * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n               * property that we're using to store and link the profile image.\n               *\n               * For more information please go to: https://github.com/solid/query-ldflex\n               */\n\n              _this.setState({\n                name: name,\n                image: image,\n                isLoading: false,\n                hasImage: hasImage\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.updatePhoto =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(uri, message) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                user = data.user;\n\n                if (!_this.state.hasImage) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return user.image.set(uri);\n\n              case 5:\n                _context2.next = 9;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return user.image.add(uri);\n\n              case 9:\n                _this.props.toastManager.add(['', message], {\n                  appearance: 'success'\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                _this.props.toastManager.add(['Error', _context2.t0.message], {\n                  appearance: 'error'\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false\n    };\n    return _this;\n  }\n\n  _createClass(WelcomeComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.webId && this.props.webId !== prevProps.webId) {\n        this.getProfileData();\n      }\n    }\n    /**\n     * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n     *\n     * This is an example of how to use the LDFlex library to fetch different linked data fields.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          image = _this$state.image,\n          isLoading = _this$state.isLoading,\n          results = _this$state.results;\n      return React.createElement(WelcomePageContent, {\n        name: name,\n        image: image,\n        isLoading: isLoading,\n        webId: this.props.webId,\n        updatePhoto: this.updatePhoto,\n        results: results,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return WelcomeComponent;\n}(Component);\n\nexport default withWebId(withToastManager(WelcomeComponent));","map":{"version":3,"sources":["C:\\Users\\jason\\Documents\\APG\\Solid\\generatorTest\\solidwakeup\\wakeup-react\\src\\containers\\Welcome\\welcome.container.js"],"names":["React","Component","WelcomePageContent","withWebId","data","withToastManager","$rdf","defaultProfilePhoto","store","graph","loadFromUrl","url","Promise","resolve","reject","fetcher","Fetcher","load","then","response","responseText","console","debug","parse","sym","uri","err","prepare","qryStr","query","SPARQLToQuery","execute","qry","wanted","vars","resultAry","results","row","rowHandler","push","r","found","got","replace","length","w","label","value","WelcomeComponent","props","getProfileData","setState","isLoading","user","webId","name","nameLd","image","imageLd","vcard_hasPhoto","hasImage","url1","url2","updatePhoto","message","state","set","add","toastManager","appearance","prevProps","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport WelcomePageContent from './welcome.component';\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\n\nimport $rdf from \"rdflib\";\n\nconst defaultProfilePhoto = '/img/icon/empty-profile.svg';\n\n// RG - 2019-02-28\n// The store is a local rdf store to hold data retrieved from Solid\nconst store = $rdf.graph();\n\n// RG - 2019-02-28\n// Loads the data from a URL into the local store\nconst loadFromUrl = (url, store) => {\n  return new Promise((resolve, reject) => {\n    let fetcher = new $rdf.Fetcher(store);\n    try {\n      fetcher.load(url).then(response => {\n        resolve(response.responseText);\n        console.debug(response.responseText);\n        $rdf.parse(response.responseText, store, $rdf.sym(url).uri, \"text/turtle\");\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\n// RG - 2019-02-28\n// Prepares a query by converting SPARQL into a Solid query\nconst prepare = (qryStr, store) => {\n  return new Promise((resolve, reject) => {\n    try {\n      let query = $rdf.SPARQLToQuery(qryStr, false, store);\n      resolve(query);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\n// RG - 2019-02-28\n// Executes a query on the local store\nconst execute = (qry, store) => {\n  return new Promise((resolve, reject) => {\n    console.debug(\"here\");\n    const wanted = qry.vars;\n    const resultAry = [];\n    store.query(\n      qry,\n      results => {\n        console.debug(\"here1\");\n        if (typeof results === \"undefined\") {\n          reject(\"No results.\");\n        } else {\n          let row = rowHandler(wanted, results);\n          console.debug(row);\n          if (row) resultAry.push(row);\n        }\n      },\n      {},\n      () => {\n        resolve(resultAry);\n      }\n    );\n  });\n};\n\n// RG - 2019-02-28\n// Puts query results into an array according to the projection\nconst rowHandler = (wanted, results) => {\n  const row = {};\n  for (var r in results) {\n    let found = false;\n    let got = r.replace(/^\\?/, \"\");\n    if (wanted.length) {\n      for (var w in wanted) {\n        if (got === wanted[w].label) {\n          found = true;\n          continue;\n        }\n      }\n      if (!found) continue;\n    }\n    row[got] = results[r].value;\n  }\n  return row;\n};\n\n\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\nclass WelcomeComponent extends Component<Props> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false\n    };\n  }\n  componentDidMount() {\n    if (this.props.webId) {\n      this.getProfileData();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.webId && this.props.webId !== prevProps.webId) {\n      this.getProfileData();\n    }\n  }\n\n  /**\n   * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n   *\n   * This is an example of how to use the LDFlex library to fetch different linked data fields.\n   */\n  getProfileData = async () => {\n    this.setState({ isLoading: true });\n    let hasImage;\n\n    /*\n     * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n     * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n     * from the returned user object.\n     */\n    const user = data[this.props.webId];\n    const nameLd = await user.name;\n\n    const name = nameLd ? nameLd.value : '';\n\n    let imageLd = await user.image;\n    imageLd = imageLd ? imageLd : await user.vcard_hasPhoto;\n\n    let image;\n    if (imageLd && imageLd.value) {\n      image = imageLd.value;\n      hasImage = true;\n    } else {\n      hasImage = false;\n      image = defaultProfilePhoto;\n    }\n\n    // RG - 2019-02-28\n    // Load data from two public Solid URLs into the local store, and run a query on the combined data\n    // Put the data into the Component state so that it can be rendered\n    // const url1 = \"https://jacobmcconomy.solid.community/profile/card#me\";\n    const url1 = \"https://theletterj.solid.community/profile/card#me\";\n    const url2 = \"https://theletterj.solid.community/public/test.ttl\";\n    \n    const qryStr = \"PREFIX cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . SELECT distinct ?name WHERE { ?Person rdf:type cco:Person ; cco:designated_by ?PFN . ?PFN rdf:type cco:PersonFullName; cco:inheres_in ?IBE . ?IBE a cco:InformationBearingEntity ;cco:has_text_value ?name .}\";\n\n    loadFromUrl(url1, store).then(() =>\n      loadFromUrl(url2, store).then(() =>\n        prepare(qryStr, store).then(qry =>\n          execute(qry, store).then(results => {\n            console.debug(results);\n            this.setState({ results: results });\n          })\n        )\n      )\n    );\n    console.debug(\"Completed load and query\");\n\n\n\n    /**\n     * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n     * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n     * it's missing, you can manually add it like we're doing here.\n     *\n     * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n     * property that we're using to store and link the profile image.\n     *\n     * For more information please go to: https://github.com/solid/query-ldflex\n     */\n    this.setState({ name, image, isLoading: false, hasImage });\n  };\n\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n  updatePhoto = async (uri: String, message) => {\n    try {\n      const { user } = data;\n      this.state.hasImage\n        ? await user.image.set(uri)\n        : await user.image.add(uri);\n\n      this.props.toastManager.add(['', message], {\n        appearance: 'success'\n      });\n    } catch (error) {\n      this.props.toastManager.add(['Error', error.message], {\n        appearance: 'error'\n      });\n    }\n  };\n\n  render() {\n    const { name, image, isLoading,results } = this.state;\n    return (\n      <WelcomePageContent\n        name={name}\n        image={image}\n        isLoading={isLoading}\n        webId={this.props.webId}\n        updatePhoto={this.updatePhoto}\n        results={results}\n      />\n    );\n  }\n}\n\nexport default withWebId(withToastManager(WelcomeComponent));\n"]},"metadata":{},"sourceType":"module"}