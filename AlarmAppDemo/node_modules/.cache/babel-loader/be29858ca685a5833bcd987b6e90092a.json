{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\src\\\\components\\\\AuthNavBar\\\\auth-nav-bar.container.js\";\nimport React, { Component } from \"react\";\nimport { withWebId } from \"@inrupt/solid-react-components\";\nimport { withTranslation } from \"react-i18next\";\nimport AuthNavBar from \"./auth-nav-bar.component\";\nimport data from \"@solid/query-ldflex\";\n\nvar AuthNavBarContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuthNavBarContainer, _Component);\n\n  function AuthNavBarContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AuthNavBarContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthNavBarContainer).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var user, userName, userImage, name, image;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // fetching user card from pod. This makes a request and returns the data\n              user = data[_this.props.webId];\n              /*\n               * In the backgorund LDFlex is using JSON-LD. Because of this, we need to\n               * make an async call. This will return a JSON-LD expanded object and expose the requested value(name).\n               * for more information please go to: https://github.com/digitalbazaar/jsonld.js\n               */\n\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              userName = _context.sent;\n              _context.next = 7;\n              return user.image;\n\n            case 7:\n              userImage = _context.sent;\n\n              if (!userImage) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.t0 = userImage;\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.next = 14;\n              return user.vcard_hasPhoto;\n\n            case 14:\n              _context.t0 = _context.sent;\n\n            case 15:\n              userImage = _context.t0;\n              name = userName ? userName.value : \"\";\n              image = userImage ? userImage.value : \"/img/icon/empty-profile.svg\";\n\n              _this.setState({\n                name: name,\n                image: image\n              });\n\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t1 = _context[\"catch\"](0);\n              console.error(_context.t1);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 21]]);\n    }));\n    _this.state = {\n      image: null\n    };\n    return _this;\n  }\n\n  _createClass(AuthNavBarContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.webId && this.props.webId !== prevProps.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var image = this.state.image;\n      return React.createElement(AuthNavBar, Object.assign({\n        img: image\n      }, this.props, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AuthNavBarContainer;\n}(Component);\n\nexport default withTranslation()(withWebId(AuthNavBarContainer));","map":{"version":3,"sources":["C:\\Users\\jason\\Documents\\APG\\Solid\\generatorTest\\solidwakeup\\wakeup-react\\src\\components\\AuthNavBar\\auth-nav-bar.container.js"],"names":["React","Component","withWebId","withTranslation","AuthNavBar","data","AuthNavBarContainer","props","getProfileData","user","webId","name","userName","image","userImage","vcard_hasPhoto","value","setState","console","error","state","prevProps","prevState"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,UAAP;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;IAEMC,mB;;;;;AACJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6FAAMA,KAAN;AADiB,UAKnBC,cALmB;AAAA;AAAA;AAAA;AAAA,6BAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb;AACMC,cAAAA,IAHO,GAGAJ,IAAI,CAAC,MAAKE,KAAL,CAAWG,KAAZ,CAHJ;AAIb;;;;;;AAJa;AAAA,qBASUD,IAAI,CAACE,IATf;;AAAA;AASPC,cAAAA,QATO;AAAA;AAAA,qBAUSH,IAAI,CAACI,KAVd;;AAAA;AAUTC,cAAAA,SAVS;;AAAA,mBAWDA,SAXC;AAAA;AAAA;AAAA;;AAAA,4BAWWA,SAXX;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAW6BL,IAAI,CAACM,cAXlC;;AAAA;AAAA;;AAAA;AAWbD,cAAAA,SAXa;AAYPH,cAAAA,IAZO,GAYAC,QAAQ,GAAGA,QAAQ,CAACI,KAAZ,GAAoB,EAZ5B;AAaPH,cAAAA,KAbO,GAaCC,SAAS,GAAGA,SAAS,CAACE,KAAb,GAAqB,6BAb/B;;AAcb,oBAAKC,QAAL,CAAc;AACZN,gBAAAA,IAAI,EAAJA,IADY;AAEZE,gBAAAA,KAAK,EAALA;AAFY,eAAd;;AAda;AAAA;;AAAA;AAAA;AAAA;AAmBbK,cAAAA,OAAO,CAACC,KAAR;;AAnBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALE;AAEjB,UAAKC,KAAL,GAAa;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAAb;AAFiB;AAGlB;;;;wCAyBmB;AAClB,UAAI,KAAKN,KAAL,CAAWG,KAAf,EAAsB;AACpB,aAAKF,cAAL;AACD;AACF;;;uCAEkBa,S,EAAWC,S,EAAW;AACvC,UAAI,KAAKf,KAAL,CAAWG,KAAX,IAAoB,KAAKH,KAAL,CAAWG,KAAX,KAAqBW,SAAS,CAACX,KAAvD,EAA8D;AAC5D,aAAKF,cAAL;AACD;AACF;;;6BAEQ;AAAA,UACCK,KADD,GACW,KAAKO,KADhB,CACCP,KADD;AAEP,aAAO,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAEA;AAAjB,SAA4B,KAAKN,KAAjC,EAA4C,KAAKa,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EA5C+BnB,S;;AA+ClC,eAAeE,eAAe,GAAGD,SAAS,CAACI,mBAAD,CAAZ,CAA9B","sourcesContent":["import React, { Component } from \"react\";\nimport { withWebId } from \"@inrupt/solid-react-components\";\nimport { withTranslation } from \"react-i18next\";\nimport AuthNavBar from \"./auth-nav-bar.component\";\nimport data from \"@solid/query-ldflex\";\n\nclass AuthNavBarContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { image: null };\n  }\n\n  getProfileData = async () => {\n    try {\n      // fetching user card from pod. This makes a request and returns the data\n      const user = data[this.props.webId];\n      /*\n       * In the backgorund LDFlex is using JSON-LD. Because of this, we need to\n       * make an async call. This will return a JSON-LD expanded object and expose the requested value(name).\n       * for more information please go to: https://github.com/digitalbazaar/jsonld.js\n       */\n      const userName = await user.name;\n      let userImage = await user.image;\n      userImage = userImage ? userImage : await user.vcard_hasPhoto;\n      const name = userName ? userName.value : \"\";\n      const image = userImage ? userImage.value : \"/img/icon/empty-profile.svg\";\n      this.setState({\n        name,\n        image\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.webId) {\n      this.getProfileData();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.webId && this.props.webId !== prevProps.webId) {\n      this.getProfileData();\n    }\n  }\n\n  render() {\n    const { image } = this.state;\n    return <AuthNavBar img={image} {...this.props} {...this.state} />;\n  }\n}\n\nexport default withTranslation()(withWebId(AuthNavBarContainer));\n"]},"metadata":{},"sourceType":"module"}