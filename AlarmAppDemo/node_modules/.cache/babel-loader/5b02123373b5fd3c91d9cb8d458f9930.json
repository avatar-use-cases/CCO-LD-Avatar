{"ast":null,"code":"// **N3Util** provides N3 utility functions\nvar Xsd = 'http://www.w3.org/2001/XMLSchema#';\nvar XsdString = Xsd + 'string';\nvar XsdInteger = Xsd + 'integer';\nvar XsdDecimal = Xsd + 'decimal';\nvar XsdBoolean = Xsd + 'boolean';\nvar RdfLangString = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString';\nvar N3Util = {\n  // Tests whether the given entity (triple object) represents an IRI in the N3 library\n  isIRI: function isIRI(entity) {\n    if (!entity) return entity;\n    var firstChar = entity[0];\n    return firstChar !== '\"' && firstChar !== '_';\n  },\n  // Tests whether the given entity (triple object) represents a literal in the N3 library\n  isLiteral: function isLiteral(entity) {\n    return entity && entity[0] === '\"';\n  },\n  // Tests whether the given entity (triple object) represents a blank node in the N3 library\n  isBlank: function isBlank(entity) {\n    return entity && entity.substr(0, 2) === '_:';\n  },\n  // Gets the string value of a literal in the N3 library\n  getLiteralValue: function getLiteralValue(literal) {\n    var match = /^\"([^]*)\"/.exec(literal);\n    if (!match) throw new Error(literal + ' is not a literal');\n    return match[1];\n  },\n  // Gets the type of a literal in the N3 library\n  getLiteralType: function getLiteralType(literal) {\n    var match = /^\"[^]*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/.exec(literal);\n    if (!match) throw new Error(literal + ' is not a literal');\n    return match[1] || (match[2] ? RdfLangString : XsdString);\n  },\n  // Gets the language of a literal in the N3 library\n  getLiteralLanguage: function getLiteralLanguage(literal) {\n    var match = /^\"[^]*\"(?:@([^@\"]+)|\\^\\^[^\"]+)?$/.exec(literal);\n    if (!match) throw new Error(literal + ' is not a literal');\n    return match[1] ? match[1].toLowerCase() : '';\n  },\n  // Tests whether the given entity (triple object) represents a prefixed name\n  isPrefixedName: function isPrefixedName(entity) {\n    return entity && /^[^:\\/\"']*:[^:\\/\"']+$/.test(entity);\n  },\n  // Expands the prefixed name to a full IRI (also when it occurs as a literal's type)\n  expandPrefixedName: function expandPrefixedName(prefixedName, prefixes) {\n    var match = /(?:^|\"\\^\\^)([^:\\/#\"'\\^_]*):[^\\/]*$/.exec(prefixedName),\n        prefix,\n        base,\n        index;\n    if (match) prefix = match[1], base = prefixes[prefix], index = match.index;\n    if (base === undefined) return prefixedName; // The match index is non-zero when expanding a literal's type.\n\n    return index === 0 ? base + prefixedName.substr(prefix.length + 1) : prefixedName.substr(0, index + 3) + base + prefixedName.substr(index + prefix.length + 4);\n  },\n  // Creates an IRI in N3.js representation\n  createIRI: function createIRI(iri) {\n    return iri && iri[0] === '\"' ? N3Util.getLiteralValue(iri) : iri;\n  },\n  // Creates a literal in N3.js representation\n  createLiteral: function createLiteral(value, modifier) {\n    if (!modifier) {\n      switch (typeof value) {\n        case 'boolean':\n          modifier = XsdBoolean;\n          break;\n\n        case 'number':\n          if (isFinite(value)) {\n            modifier = value % 1 === 0 ? XsdInteger : XsdDecimal;\n            break;\n          }\n\n        default:\n          return '\"' + value + '\"';\n      }\n    }\n\n    return '\"' + value + (/^[a-z]+(-[a-z0-9]+)*$/i.test(modifier) ? '\"@' + modifier.toLowerCase() : '\"^^' + modifier);\n  }\n}; // Add the N3Util functions to the given object or its prototype\n\nfunction addN3Util(parent, toPrototype) {\n  for (var name in N3Util) {\n    if (!toPrototype) parent[name] = N3Util[name];else parent.prototype[name] = applyToThis(N3Util[name]);\n  }\n\n  return parent;\n} // Returns a function that applies `f` to the `this` object\n\n\nfunction applyToThis(f) {\n  return function (a) {\n    return f(this, a);\n  };\n} // Expose N3Util, attaching all functions to it\n\n\nmodule.exports = addN3Util(addN3Util);","map":null,"metadata":{},"sourceType":"script"}