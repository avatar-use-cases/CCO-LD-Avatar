{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ClassOrder = require('./class-order');\n\nvar Node = require('./node');\n\nvar BlankNode =\n/*#__PURE__*/\nfunction (_Node) {\n  _inherits(BlankNode, _Node);\n\n  function BlankNode(id) {\n    var _this;\n\n    _classCallCheck(this, BlankNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlankNode).call(this));\n    _this.termType = BlankNode.termType;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        console.log('Bad blank id:', id);\n        throw new Error('Bad id argument to new blank node: ' + id);\n      }\n\n      if (id.includes('#')) {\n        // Is a URI with hash fragment\n        var fragments = id.split('#');\n        id = fragments[fragments.length - 1];\n      }\n\n      _this.id = id; // this.id = '' + BlankNode.nextId++\n    } else {\n      _this.id = 'n' + BlankNode.nextId++;\n    }\n\n    _this.value = _this.id;\n    return _this;\n  }\n\n  _createClass(BlankNode, [{\n    key: \"compareTerm\",\n    value: function compareTerm(other) {\n      if (this.classOrder < other.classOrder) {\n        return -1;\n      }\n\n      if (this.classOrder > other.classOrder) {\n        return +1;\n      }\n\n      if (this.id < other.id) {\n        return -1;\n      }\n\n      if (this.id > other.id) {\n        return +1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(formula) {\n      // depends on the formula\n      var bnodeNew = new BlankNode();\n      formula.copyTo(this, bnodeNew);\n      return bnodeNew;\n    }\n  }, {\n    key: \"toCanonical\",\n    value: function toCanonical() {\n      return '_:' + this.value;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return BlankNode.NTAnonymousNodePrefix + this.id;\n    }\n  }]);\n\n  return BlankNode;\n}(Node);\n\nBlankNode.nextId = 0;\nBlankNode.termType = 'BlankNode';\nBlankNode.NTAnonymousNodePrefix = '_:';\nBlankNode.prototype.classOrder = ClassOrder['BlankNode'];\nBlankNode.prototype.isBlank = 1;\nBlankNode.prototype.isVar = 1;\nmodule.exports = BlankNode;","map":null,"metadata":{},"sourceType":"script"}