{"ast":null,"code":"\"use strict\";\n\nmodule.exports = parse;\n\nvar BlankNode = require('./blank-node');\n\nvar jsonld = require('jsonld');\n\nvar Literal = require('./literal');\n\nvar N3 = require('n3'); // @@ Goal: remove this dependency\n\n\nvar N3Parser = require('./n3parser');\n\nvar NamedNode = require('./named-node');\n\nvar parseRDFaDOM = require('./rdfaparser').parseRDFaDOM;\n\nvar RDFParser = require('./rdfxmlparser');\n\nvar sparqlUpdateParser = require('./patch-parser');\n\nvar Util = require('./util');\n/**\n * Parse a string and put the result into the graph kb.\n * Normal method is sync.\n * Unfortunately jsdonld is currently written to need to be called async.\n * Hence the mess below with executeCallback.\n */\n\n\nfunction parse(str, kb, base, contentType, callback) {\n  contentType = contentType || 'text/turtle';\n  contentType = contentType.split(';')[0];\n\n  try {\n    if (contentType === 'text/n3' || contentType === 'text/turtle') {\n      var p = N3Parser(kb, kb, base, base, null, null, '', null);\n      p.loadBuf(str);\n      executeCallback();\n    } else if (contentType === 'application/rdf+xml') {\n      var parser = new RDFParser(kb);\n      parser.parse(Util.parseXML(str), base, kb.sym(base));\n      executeCallback();\n    } else if (contentType === 'application/xhtml+xml') {\n      parseRDFaDOM(Util.parseXML(str, {\n        contentType: 'application/xhtml+xml'\n      }), kb, base);\n      executeCallback();\n    } else if (contentType === 'text/html') {\n      parseRDFaDOM(Util.parseXML(str, {\n        contentType: 'text/html'\n      }), kb, base);\n      executeCallback();\n    } else if (contentType === 'application/sparql-update') {\n      // @@ we handle a subset\n      sparqlUpdateParser(str, kb, base);\n      executeCallback();\n    } else if (contentType === 'application/ld+json' || contentType === 'application/nquads' || contentType === 'application/n-quads') {\n      var n3Parser = N3.Parser();\n      var triples = [];\n\n      if (contentType === 'application/ld+json') {\n        var jsonDocument;\n\n        try {\n          jsonDocument = JSON.parse(str);\n        } catch (parseErr) {\n          return callback(parseErr, null);\n        }\n\n        jsonld.toRDF(jsonDocument, {\n          format: 'application/nquads',\n          base: base\n        }, nquadCallback);\n      } else {\n        nquadCallback(null, str);\n      }\n    } else {\n      throw new Error(\"Don't know how to parse \" + contentType + ' yet');\n    }\n  } catch (e) {\n    executeErrorCallback(e);\n  }\n\n  parse.handled = {\n    'text/n3': true,\n    'text/turtle': true,\n    'application/rdf+xml': true,\n    'application/xhtml+xml': true,\n    'text/html': true,\n    'application/sparql-update': true,\n    'application/ld+json': true,\n    'application/nquads': true,\n    'application/n-quads': true\n  };\n\n  function executeCallback() {\n    if (callback) {\n      callback(null, kb);\n    } else {\n      return;\n    }\n  }\n\n  function executeErrorCallback(e) {\n    if (contentType !== 'application/ld+json' || contentType !== 'application/nquads' || contentType !== 'application/n-quads') {\n      if (callback) {\n        callback(e, kb);\n      } else {\n        var e2 = new Error('' + e + ' while trying to parse <' + base + '> as ' + contentType);\n        e2.cause = e;\n        throw e2;\n      }\n    }\n  }\n  /*\n    function setJsonLdBase (doc, base) {\n      if (doc instanceof Array) {\n        return\n      }\n      if (!('@context' in doc)) {\n        doc['@context'] = {}\n      }\n      doc['@context']['@base'] = base\n    }\n  */\n\n\n  function nquadCallback(err, nquads) {\n    if (err) {\n      callback(err, kb);\n    }\n\n    try {\n      n3Parser.parse(nquads, tripleCallback);\n    } catch (err) {\n      callback(err, kb);\n    }\n  }\n\n  function tripleCallback(err, triple, prefixes) {\n    if (err) {\n      callback(err, kb);\n    }\n\n    if (triple) {\n      triples.push(triple);\n    } else {\n      for (var i = 0; i < triples.length; i++) {\n        addTriple(kb, triples[i]);\n      }\n\n      callback(null, kb);\n    }\n  }\n\n  function addTriple(kb, triple) {\n    var subject = createTerm(triple.subject);\n    var predicate = createTerm(triple.predicate);\n    var object = createTerm(triple.object);\n    var why = null;\n\n    if (triple.graph) {\n      why = createTerm(triple.graph);\n    }\n\n    kb.add(subject, predicate, object, why);\n  }\n\n  function createTerm(termString) {\n    var value;\n\n    if (N3.Util.isLiteral(termString)) {\n      value = N3.Util.getLiteralValue(termString);\n      var language = N3.Util.getLiteralLanguage(termString);\n      var datatype = new NamedNode(N3.Util.getLiteralType(termString));\n      return new Literal(value, language, datatype);\n    } else if (N3.Util.isIRI(termString)) {\n      return new NamedNode(termString);\n    } else if (N3.Util.isBlank(termString)) {\n      value = termString.substring(2, termString.length);\n      return new BlankNode(value);\n    } else {\n      return null;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}