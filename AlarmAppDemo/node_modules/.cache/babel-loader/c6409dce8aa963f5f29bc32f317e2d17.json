{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ClassOrder = require('./class-order');\n\nvar NamedNode = require('./named-node');\n\nvar Node = require('./node');\n\nvar XSD = require('./xsd');\n\nvar Literal =\n/*#__PURE__*/\nfunction (_Node) {\n  _inherits(Literal, _Node);\n\n  function Literal(value, language, datatype) {\n    var _this;\n\n    _classCallCheck(this, Literal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Literal).call(this));\n    _this.termType = Literal.termType;\n    _this.value = value;\n\n    if (language) {\n      _this.lang = language;\n      datatype = XSD.langString;\n    } // If not specified, a literal has the implied XSD.string default datatype\n\n\n    if (datatype) {\n      _this.datatype = NamedNode.fromValue(datatype);\n    }\n\n    return _this;\n  }\n\n  _createClass(Literal, [{\n    key: \"copy\",\n    value: function copy() {\n      return new Literal(this.value, this.lang, this.datatype);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n\n      return this.termType === other.termType && this.value === other.value && this.language === other.language && (!this.datatype && !other.datatype || this.datatype && this.datatype.equals(other.datatype));\n    }\n  }, {\n    key: \"toNT\",\n    value: function toNT() {\n      if (typeof this.value === 'number') {\n        return this.toString();\n      } else if (typeof this.value !== 'string') {\n        throw new Error('Value of RDF literal is not string or number: ' + this.value);\n      }\n\n      var str = this.value;\n      str = str.replace(/\\\\/g, '\\\\\\\\');\n      str = str.replace(/\\\"/g, '\\\\\"');\n      str = str.replace(/\\n/g, '\\\\n');\n      str = '\"' + str + '\"';\n\n      if (this.language) {\n        str += '@' + this.language;\n      } else if (!this.datatype.equals(XSD.string)) {\n        // Only add datatype if it's not a string\n        str += '^^' + this.datatype.toCanonical();\n      }\n\n      return str;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '' + this.value;\n    }\n    /**\n     * @method fromBoolean\n     * @static\n     * @param value {Boolean}\n     * @return {Literal}\n     */\n\n  }, {\n    key: \"language\",\n    get: function get() {\n      return this.lang;\n    },\n    set: function set(language) {\n      this.lang = language || '';\n    }\n  }], [{\n    key: \"fromBoolean\",\n    value: function fromBoolean(value) {\n      var strValue = value ? '1' : '0';\n      return new Literal(strValue, null, XSD.boolean);\n    }\n    /**\n     * @method fromDate\n     * @static\n     * @param value {Date}\n     * @return {Literal}\n     */\n\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(value) {\n      if (!(value instanceof Date)) {\n        throw new TypeError('Invalid argument to Literal.fromDate()');\n      }\n\n      var d2 = function d2(x) {\n        return ('' + (100 + x)).slice(1, 3);\n      };\n\n      var date = '' + value.getUTCFullYear() + '-' + d2(value.getUTCMonth() + 1) + '-' + d2(value.getUTCDate()) + 'T' + d2(value.getUTCHours()) + ':' + d2(value.getUTCMinutes()) + ':' + d2(value.getUTCSeconds()) + 'Z';\n      return new Literal(date, null, XSD.dateTime);\n    }\n    /**\n     * @method fromNumber\n     * @static\n     * @param value {Number}\n     * @return {Literal}\n     */\n\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(value) {\n      if (typeof value !== 'number') {\n        throw new TypeError('Invalid argument to Literal.fromNumber()');\n      }\n\n      var datatype;\n      var strValue = value.toString();\n\n      if (strValue.indexOf('e') < 0 && Math.abs(value) <= Number.MAX_SAFE_INTEGER) {\n        datatype = Number.isInteger(value) ? XSD.integer : XSD.decimal;\n      } else {\n        datatype = XSD.double;\n      }\n\n      return new Literal(strValue, null, datatype);\n    }\n    /**\n     * @method fromValue\n     * @param value\n     * @return {Literal}\n     */\n\n  }, {\n    key: \"fromValue\",\n    value: function fromValue(value) {\n      if (typeof value === 'undefined' || value === null) {\n        return value;\n      }\n\n      if (_typeof(value) === 'object' && value.termType) {\n        // this is a Node instance\n        return value;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (value instanceof Date) {\n            return Literal.fromDate(value);\n          }\n\n        case 'boolean':\n          return Literal.fromBoolean(value);\n\n        case 'number':\n          return Literal.fromNumber(value);\n\n        case 'string':\n          return new Literal(value);\n      }\n\n      throw new Error(\"Can't make literal from \" + value + ' of type ' + _typeof(value));\n    }\n  }]);\n\n  return Literal;\n}(Node);\n\nLiteral.termType = 'Literal';\nLiteral.prototype.classOrder = ClassOrder['Literal'];\nLiteral.prototype.datatype = XSD.string;\nLiteral.prototype.lang = '';\nLiteral.prototype.isVar = 0;\nmodule.exports = Literal;","map":null,"metadata":{},"sourceType":"script"}