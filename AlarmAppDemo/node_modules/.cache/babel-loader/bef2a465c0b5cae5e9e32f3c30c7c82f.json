{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\src\\\\containers\\\\Setup\\\\setup.container.js\";\nimport React, { Component } from 'react';\nimport SetupPageContent from \"./setup.component\";\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\nimport $rdf from \"rdflib\";\nvar defaultProfilePhoto = '/img/icon/empty-profile.svg';\nvar store = $rdf.graph(); // RG - 2019-02-28\n// Loads the data from a URL into the local store\n\nvar loadFromUrl = function loadFromUrl(url, store) {\n  return new Promise(function (resolve, reject) {\n    var fetcher = new $rdf.Fetcher(store);\n\n    try {\n      fetcher.load(url).then(function (response) {\n        resolve(response.responseText);\n        console.debug(response.responseText); // $rdf.parse(response.responseText, store, $rdf.sym(url).uri,\"application/rdf\");\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Prepares a query by converting SPARQL into a Solid query\n\n\nvar prepare = function prepare(qryStr, store) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var query = $rdf.SPARQLToQuery(qryStr, false, store);\n      resolve(query);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}; // RG - 2019-02-28\n// Executes a query on the local store\n\n\nvar execute = function execute(qry, store) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"here\");\n    var wanted = qry.vars;\n    var resultAry = [];\n    store.query(qry, function (results) {\n      console.debug(\"here1\");\n\n      if (typeof results === \"undefined\") {\n        reject(\"No results.\");\n      } else {\n        var row = rowHandler(wanted, results);\n        console.debug(row);\n        if (row) resultAry.push(row);\n      }\n    }, {}, function () {\n      resolve(resultAry);\n    });\n  });\n}; // RG - 2019-02-28\n// Puts query results into an array according to the projection\n\n\nvar rowHandler = function rowHandler(wanted, results) {\n  var row = {};\n\n  for (var r in results) {\n    var found = false;\n    var got = r.replace(/^\\?/, \"\");\n\n    if (wanted.length) {\n      for (var w in wanted) {\n        if (got === wanted[w].label) {\n          found = true;\n          continue;\n        }\n      }\n\n      if (!found) continue;\n    }\n\n    row[got] = results[r].value;\n  }\n\n  return row;\n};\n\nvar SetupComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SetupComponent, _Component);\n\n  function SetupComponent(props) {\n    var _this;\n\n    _classCallCheck(this, SetupComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SetupComponent).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var hasImage, user, nameLd, name, imageLd, image, url3, qryStr1, qryStr2, qryStrQ, homeAddressQS;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                isLoading: true\n              });\n\n              /*\r\n               * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\r\n               * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\r\n               * from the returned user object.\r\n               */\n              user = data[_this.props.webId];\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              nameLd = _context.sent;\n              name = nameLd ? nameLd.value : '';\n              _context.next = 8;\n              return user.image;\n\n            case 8:\n              imageLd = _context.sent;\n\n              if (!imageLd) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.t0 = imageLd;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return user.vcard_hasPhoto;\n\n            case 15:\n              _context.t0 = _context.sent;\n\n            case 16:\n              imageLd = _context.t0;\n\n              if (imageLd && imageLd.value) {\n                image = imageLd.value;\n                hasImage = true;\n              } else {\n                hasImage = false;\n                image = defaultProfilePhoto;\n              } // RG - 2019-02-28\n              // Load data from two public Solid URLs into the local store, and run a query on the combined data\n              // Put the data into the Component state so that it can be rendered\n              // const url2 = \"https://theletterj.solid.community/profile/card#me\";\n\n\n              url3 = \"https://theletterj.solid.community/private/JohnDoe.rdf\";\n              qryStr1 = \"select ?s ?o ?p where { ?s ?o ?p . }\";\n              qryStr2 = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . select distinct ?o . where{?person a cco:Person; cco:designated_by ?name . ?name a cco:FamilyName; cco:inheres_in/cco:has_text_value ?o .}\";\n              qryStrQ = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . select distinct ?o where {?s a cco:Person; cco:designated_by ?name . ?name a cco:GivenName . ?name cco:inheres_in ?ibe . ?ibe cco:has_text_value ?o .}\";\n              homeAddressQS = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . prefix ro: <http://www.obofoundry.org/ro/ro.owl#> . select distinct ?streetAddress ?cityname ?statename where {?person a cco:Person . ?person cco:uses ?residence . ?residence a cco:ResidentialFacility .?residence cco:designated_by ?resAddr .?resAddr a cco:StreetAddress .?resAddr cco:inheres_in/cco:has_text_value ?streetAddress .?residence ro:located_in ?tmpCity .?tmpCity a cco:City;cco:designated_by/cco:inheres_in/cco:has_text_value ?cityname.?residence ro:located_in ?tmpState .?tmpState a cco:State;cco:designated_by/cco:inheres_in/cco:has_text_value ?statename .}\"; // fieldsToQuery = [homeAddrQ,workAddrQ]\n\n              loadFromUrl(url3, store).then(function () {\n                return prepare(homeAddressQS, store).then(function (qry) {\n                  return execute(qry, store).then(function (results) {\n                    console.debug(results);\n\n                    _this.setState({\n                      homeAddr: results\n                    });\n                  });\n                });\n              });\n              console.debug(\"Completed load and query\");\n\n              _this.setState({\n                name: name,\n                image: image,\n                isLoading: false,\n                hasImage: hasImage\n              });\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.updatePhoto =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(uri, message) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                user = data.user;\n\n                if (!_this.state.hasImage) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return user.image.set(uri);\n\n              case 5:\n                _context2.next = 9;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return user.image.add(uri);\n\n              case 9:\n                _this.props.toastManager.add(['', message], {\n                  appearance: 'success'\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                _this.props.toastManager.add(['Error', _context2.t0.message], {\n                  appearance: 'error'\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false,\n      hits: []\n    };\n    return _this;\n  }\n\n  _createClass(SetupComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n\n      var homeAddress = '732 cleaver farm road, middletown de';\n      var workAddress = '260 christiana rd, newcastle de'; //MAPQUEST API\n\n      var MAPQUEST_API = 'http://www.mapquestapi.com/directions/v2/route?key=DMw31TyjrjAee8VA1XAKnGGqw5sg7Nm3&from=';\n      var TO = '&to=';\n      fetch(MAPQUEST_API + homeAddress + TO + workAddress).then(function (response) {\n        return response.json();\n      }).then(function (resData) {\n        var time = resData.route[\"time\"] / 60;\n\n        _this2.setState({\n          driveTime: time\n        }); //this is an asynchronous function\n\n\n        console.log(\"fetch drivetime...\");\n        console.log({\n          driveTime: time\n        });\n        console.log('end drivetime');\n      }); //WEATHER API\n\n      var getLatLng = 'http://www.mapquestapi.com/geocoding/v1/address?key=DMw31TyjrjAee8VA1XAKnGGqw5sg7Nm3&location=260%20christiana%20rd%20newcastle%20de';\n      fetch(getLatLng).then(function (response) {\n        return response.json();\n      }).then(function (responseData) {\n        console.log('Get latLng for weather...');\n\n        _this2.setState({\n          weatherLat: responseData['results']['0']['locations']['0']['latLng']['lat']\n        });\n\n        _this2.setState({\n          weatherLng: responseData['results']['0']['locations']['0']['latLng']['lng']\n        });\n\n        console.log('latLng for weather:' + JSON.stringify(responseData['results']['0']['locations']['0']['latLng']));\n        console.log('End get latLng for weather');\n      }).then(function () {\n        fetch(WEATHER_API + _this2.state.weatherLat + ',' + _this2.state.weatherLng + FORECAST).then(function (response) {\n          return response.json();\n        }).then(function (weatherData) {\n          if (weatherData['status'] !== 404) {\n            _this2.setState({\n              weather: weatherData['properties']['periods']['0']['shortForecast']\n            });\n\n            console.log(\"weather fetch for \" + _this2.state.weatherLat.toString() + _this2.state.weatherLng.toString());\n            console.log(_this2.state.weather);\n\n            if (_this2.state.weather.includes('Rain') || _this2.state.weather.includes('Snow')) {\n              console.log('inclement weather');\n\n              _this2.setState({\n                weatherPenalty: 15\n              });\n            } else {\n              _this2.setState({\n                weatherPenalty: 0\n              });\n\n              console.log('No weather penalty');\n            }\n          } else {\n            _this2.setState({\n              weather: 'No weather data found'\n            });\n\n            _this2.setState({\n              weatherPenalty: 0\n            });\n          }\n\n          console.log(\"end weather fetch\");\n        });\n      });\n      var WEATHER_API = 'https://api.weather.gov/points/';\n      var FORECAST = '/forecast'; // fetch(WEATHER_API+workAddress+FORECAST).then(response =>  response.json()).then(weatherData => this.setState({weather:weatherData}));   \n    } //componentDidMount()\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.webId && this.props.webId !== prevProps.webId) {\n        this.getProfileData();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          image = _this$state.image,\n          isLoading = _this$state.isLoading,\n          results = _this$state.results,\n          driveTime = _this$state.driveTime,\n          weather = _this$state.weather,\n          weatherPenalty = _this$state.weatherPenalty;\n      return React.createElement(SetupPageContent, {\n        name: name,\n        image: image,\n        isLoading: isLoading,\n        webId: this.props.webId,\n        updatePhoto: this.updatePhoto,\n        results: results,\n        driveTime: driveTime,\n        weather: weather,\n        weatherPenalty: weatherPenalty,\n        sliderVal: 0,\n        homeAddress: homeAddr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SetupComponent;\n}(Component);\n\nexport default withWebId(withToastManager(SetupComponent));","map":{"version":3,"sources":["C:\\Users\\jason\\Documents\\APG\\Solid\\generatorTest\\solidwakeup\\wakeup-react\\src\\containers\\Setup\\setup.container.js"],"names":["React","Component","SetupPageContent","withWebId","data","withToastManager","$rdf","defaultProfilePhoto","store","graph","loadFromUrl","url","Promise","resolve","reject","fetcher","Fetcher","load","then","response","responseText","console","debug","err","prepare","qryStr","query","SPARQLToQuery","execute","qry","wanted","vars","resultAry","results","row","rowHandler","push","r","found","got","replace","length","w","label","value","SetupComponent","props","getProfileData","setState","isLoading","user","webId","name","nameLd","image","imageLd","vcard_hasPhoto","hasImage","url3","qryStr1","qryStr2","qryStrQ","homeAddressQS","homeAddr","updatePhoto","uri","message","state","set","add","toastManager","appearance","hits","homeAddress","workAddress","MAPQUEST_API","TO","fetch","json","resData","time","route","driveTime","log","getLatLng","responseData","weatherLat","weatherLng","JSON","stringify","WEATHER_API","FORECAST","weatherData","weather","toString","includes","weatherPenalty","prevProps","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport SetupPageContent from './setup.component';\r\nimport { withWebId } from '@inrupt/solid-react-components';\r\nimport data from '@solid/query-ldflex';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport $rdf from \"rdflib\";\r\n\r\nconst defaultProfilePhoto = '/img/icon/empty-profile.svg';\r\nconst store = $rdf.graph();\r\n\r\n\r\n// RG - 2019-02-28\r\n// Loads the data from a URL into the local store\r\nconst loadFromUrl = (url, store) => {\r\n    return new Promise((resolve, reject) => {\r\n      let fetcher = new $rdf.Fetcher(store);\r\n      try {\r\n        fetcher.load(url).then(response => {\r\n          resolve(response.responseText);\r\n          console.debug(response.responseText);\r\n          // $rdf.parse(response.responseText, store, $rdf.sym(url).uri,\"application/rdf\");\r\n        });\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n  \r\n  // RG - 2019-02-28\r\n  // Prepares a query by converting SPARQL into a Solid query\r\n  const prepare = (qryStr, store) => {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let query = $rdf.SPARQLToQuery(qryStr, false, store);\r\n        resolve(query);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n  \r\n  // RG - 2019-02-28\r\n  // Executes a query on the local store\r\n  const execute = (qry, store) => {\r\n    return new Promise((resolve, reject) => {\r\n      console.debug(\"here\");\r\n      const wanted = qry.vars;\r\n      const resultAry = [];\r\n      store.query(\r\n        qry,\r\n        results => {\r\n          console.debug(\"here1\");\r\n          if (typeof results === \"undefined\") {\r\n            reject(\"No results.\");\r\n          } else {\r\n            let row = rowHandler(wanted, results);\r\n            console.debug(row);\r\n            if (row) resultAry.push(row);\r\n          }\r\n        },\r\n        {},\r\n        () => {\r\n          resolve(resultAry);\r\n        }\r\n      );\r\n    });\r\n  };\r\n  \r\n  // RG - 2019-02-28\r\n  // Puts query results into an array according to the projection\r\n  const rowHandler = (wanted, results) => {\r\n    const row = {};\r\n    for (var r in results) {\r\n      let found = false;\r\n      let got = r.replace(/^\\?/, \"\");\r\n      if (wanted.length) {\r\n        for (var w in wanted) {\r\n          if (got === wanted[w].label) {\r\n            found = true;\r\n            continue;\r\n          }\r\n        }\r\n        if (!found) continue;\r\n      }\r\n      row[got] = results[r].value;\r\n    }\r\n    return row;\r\n  };\r\n\r\nclass SetupComponent extends Component<Props> {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          name: '',\r\n          image: defaultProfilePhoto,\r\n          isLoading: false,\r\n          hasImage: false,\r\n          hits:[]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.webId) {\r\n          this.getProfileData();\r\n        }\r\n    \r\n        var homeAddress = '732 cleaver farm road, middletown de';\r\n        var workAddress = '260 christiana rd, newcastle de';\r\n    \r\n        //MAPQUEST API\r\n        const MAPQUEST_API = 'http://www.mapquestapi.com/directions/v2/route?key=DMw31TyjrjAee8VA1XAKnGGqw5sg7Nm3&from=';\r\n        const TO = '&to=';\r\n    \r\n        fetch(MAPQUEST_API + homeAddress + TO + workAddress)\r\n        .then(response =>  response.json())\r\n        .then(resData => {\r\n           \r\n           let time = resData.route[\"time\"]/60;\r\n           this.setState({ driveTime: time }); //this is an asynchronous function\r\n           console.log(\"fetch drivetime...\");\r\n           console.log({driveTime:time});\r\n           console.log('end drivetime');\r\n        })\r\n    \r\n        //WEATHER API\r\n        const getLatLng = 'http://www.mapquestapi.com/geocoding/v1/address?key=DMw31TyjrjAee8VA1XAKnGGqw5sg7Nm3&location=260%20christiana%20rd%20newcastle%20de';\r\n    \r\n        fetch(getLatLng).then(response => response.json()).then(responseData => {\r\n          console.log('Get latLng for weather...');\r\n          this.setState({weatherLat:responseData['results']['0']['locations']['0']['latLng']['lat']});\r\n          this.setState({weatherLng:responseData['results']['0']['locations']['0']['latLng']['lng']});\r\n          console.log('latLng for weather:' + JSON.stringify(responseData['results']['0']['locations']['0']['latLng']));\r\n          console.log('End get latLng for weather');\r\n        }).then(() => {\r\n          fetch(WEATHER_API+this.state.weatherLat+','+this.state.weatherLng+FORECAST).then(response =>  response.json()).then(weatherData => {\r\n            if (weatherData['status'] !== 404){\r\n              this.setState({weather:weatherData['properties']['periods']['0']['shortForecast']})\r\n              console.log(\"weather fetch for \" + this.state.weatherLat.toString() + this.state.weatherLng.toString());\r\n              console.log(this.state.weather);\r\n              if ( (this.state.weather.includes('Rain')) || (this.state.weather.includes('Snow'))  ){\r\n                console.log('inclement weather');\r\n                this.setState({weatherPenalty:15});\r\n              } \r\n              else{\r\n                this.setState({weatherPenalty:0});\r\n                console.log('No weather penalty');\r\n              }\r\n            }\r\n            else{\r\n              this.setState({weather:'No weather data found'})\r\n              this.setState({weatherPenalty:0})\r\n            }\r\n            console.log(\"end weather fetch\");\r\n          })});\r\n    \r\n    \r\n        const WEATHER_API = 'https://api.weather.gov/points/';\r\n        const FORECAST = '/forecast';\r\n        \r\n        // fetch(WEATHER_API+workAddress+FORECAST).then(response =>  response.json()).then(weatherData => this.setState({weather:weatherData}));   \r\n    \r\n    }//componentDidMount()\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.webId && this.props.webId !== prevProps.webId) {\r\n          this.getProfileData();\r\n        }\r\n    }\r\n\r\n    getProfileData = async () => {\r\n        this.setState({ isLoading: true });\r\n        let hasImage;\r\n    \r\n        /*\r\n         * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\r\n         * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\r\n         * from the returned user object.\r\n         */\r\n        const user = data[this.props.webId];\r\n        const nameLd = await user.name;\r\n    \r\n        const name = nameLd ? nameLd.value : '';\r\n    \r\n        let imageLd = await user.image;\r\n        imageLd = imageLd ? imageLd : await user.vcard_hasPhoto;\r\n    \r\n        let image;\r\n        if (imageLd && imageLd.value) {\r\n          image = imageLd.value;\r\n          hasImage = true;\r\n        } else {\r\n          hasImage = false;\r\n          image = defaultProfilePhoto;\r\n        }\r\n\r\n\r\n    // RG - 2019-02-28\r\n    // Load data from two public Solid URLs into the local store, and run a query on the combined data\r\n    // Put the data into the Component state so that it can be rendered\r\n    // const url2 = \"https://theletterj.solid.community/profile/card#me\";\r\n    const url3 = \"https://theletterj.solid.community/private/JohnDoe.rdf\";\r\n    const qryStr1 = \"select ?s ?o ?p where { ?s ?o ?p . }\";\r\n    const qryStr2 = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . select distinct ?o . where{?person a cco:Person; cco:designated_by ?name . ?name a cco:FamilyName; cco:inheres_in/cco:has_text_value ?o .}\";\r\n    const qryStrQ = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . select distinct ?o where {?s a cco:Person; cco:designated_by ?name . ?name a cco:GivenName . ?name cco:inheres_in ?ibe . ?ibe cco:has_text_value ?o .}\";\r\n    const homeAddressQS = \"prefix cco: <http://www.ontologyrepository.com/CommonCoreOntologies/> . prefix ro: <http://www.obofoundry.org/ro/ro.owl#> . select distinct ?streetAddress ?cityname ?statename where {?person a cco:Person . ?person cco:uses ?residence . ?residence a cco:ResidentialFacility .?residence cco:designated_by ?resAddr .?resAddr a cco:StreetAddress .?resAddr cco:inheres_in/cco:has_text_value ?streetAddress .?residence ro:located_in ?tmpCity .?tmpCity a cco:City;cco:designated_by/cco:inheres_in/cco:has_text_value ?cityname.?residence ro:located_in ?tmpState .?tmpState a cco:State;cco:designated_by/cco:inheres_in/cco:has_text_value ?statename .}\"\r\n    // fieldsToQuery = [homeAddrQ,workAddrQ]\r\n\r\n    loadFromUrl(url3, store).then(() =>\r\n        prepare(homeAddressQS, store).then(qry =>\r\n          execute(qry, store).then(results => {\r\n            console.debug(results);\r\n            this.setState({ homeAddr: results });\r\n          })\r\n        )\r\n      \r\n    );\r\n    console.debug(\"Completed load and query\");\r\n\r\n        this.setState({ name, image, isLoading: false, hasImage });\r\n    };\r\n\r\n    updatePhoto = async (uri: String, message) => {\r\n        try {\r\n          const { user } = data;\r\n          this.state.hasImage\r\n            ? await user.image.set(uri)\r\n            : await user.image.add(uri);\r\n    \r\n          this.props.toastManager.add(['', message], {\r\n            appearance: 'success'\r\n          });\r\n        } catch (error) {\r\n          this.props.toastManager.add(['Error', error.message], {\r\n            appearance: 'error'\r\n          });\r\n        }\r\n    };    \r\n\r\n    render() {\r\n        const { name, image, isLoading,results,driveTime,weather,weatherPenalty } = this.state;\r\n\r\n        return (\r\n        <SetupPageContent\r\n            name={name}\r\n            image={image}\r\n            isLoading={isLoading}\r\n            webId={this.props.webId}\r\n            updatePhoto={this.updatePhoto}\r\n            results={results}\r\n            driveTime={driveTime}\r\n            weather={weather}\r\n            weatherPenalty={weatherPenalty}\r\n            sliderVal={0}\r\n            homeAddress={homeAddr}\r\n        />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWebId(withToastManager(SetupComponent));\r\n"]},"metadata":{},"sourceType":"module"}