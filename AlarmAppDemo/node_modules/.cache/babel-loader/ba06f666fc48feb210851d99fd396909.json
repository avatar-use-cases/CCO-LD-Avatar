{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\APG\\\\Solid\\\\generatorTest\\\\solidwakeup\\\\wakeup-react\\\\src\\\\containers\\\\Welcome\\\\welcome.container.js\";\nimport React, { Component } from 'react';\nimport WelcomePageContent from \"./welcome.component\";\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\nvar defaultProfilePhoto = '/img/icon/empty-profile.svg';\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\n\nvar WelcomeComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WelcomeComponent, _Component);\n\n  function WelcomeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, WelcomeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WelcomeComponent).call(this, props));\n    _this.getProfileData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var hasImage, user, nameLd, name, imageLd, image;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                isLoading: true\n              });\n\n              /*\n               * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n               * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n               * from the returned user object.\n               */\n              user = data[_this.props.webId];\n              _context.next = 4;\n              return user.name;\n\n            case 4:\n              nameLd = _context.sent;\n              name = nameLd ? nameLd.value : '';\n              _context.next = 8;\n              return user.image;\n\n            case 8:\n              imageLd = _context.sent;\n\n              if (!imageLd) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.t0 = imageLd;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return user.vcard_hasPhoto;\n\n            case 15:\n              _context.t0 = _context.sent;\n\n            case 16:\n              imageLd = _context.t0;\n\n              if (imageLd && imageLd.value) {\n                image = imageLd.value;\n                hasImage = true;\n              } else {\n                hasImage = false;\n                image = defaultProfilePhoto;\n              }\n\n              _this.setState({\n                name: name,\n                image: image,\n                isLoading: false,\n                hasImage: hasImage\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.updatePhoto =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(uri, message) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                user = data.user;\n\n                if (!_this.state.hasImage) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return user.image.set(uri);\n\n              case 5:\n                _context2.next = 9;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return user.image.add(uri);\n\n              case 9:\n                _this.props.toastManager.add(['', message], {\n                  appearance: 'success'\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                _this.props.toastManager.add(['Error', _context2.t0.message], {\n                  appearance: 'error'\n                });\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false,\n      hits: []\n    };\n    return _this;\n  }\n\n  _createClass(WelcomeComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.webId) {\n        this.getProfileData();\n      }\n    } //componentDidMount()\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.webId && this.props.webId !== prevProps.webId) {\n        this.getProfileData();\n      }\n    }\n    /**\n     * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n     *\n     * This is an example of how to use the LDFlex library to fetch different linked data fields.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          image = _this$state.image,\n          isLoading = _this$state.isLoading,\n          results = _this$state.results,\n          driveTime = _this$state.driveTime,\n          weather = _this$state.weather,\n          weatherPenalty = _this$state.weatherPenalty;\n      return React.createElement(WelcomePageContent, {\n        name: name,\n        image: image,\n        isLoading: isLoading,\n        webId: this.props.webId,\n        updatePhoto: this.updatePhoto,\n        results: results,\n        driveTime: driveTime,\n        weather: weather,\n        weatherPenalty: weatherPenalty,\n        sliderVal: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return WelcomeComponent;\n}(Component);\n\nexport default withWebId(withToastManager(WelcomeComponent));","map":{"version":3,"sources":["C:\\Users\\jason\\Documents\\APG\\Solid\\generatorTest\\solidwakeup\\wakeup-react\\src\\containers\\Welcome\\welcome.container.js"],"names":["React","Component","WelcomePageContent","withWebId","data","withToastManager","defaultProfilePhoto","WelcomeComponent","props","getProfileData","setState","isLoading","user","webId","name","nameLd","value","image","imageLd","vcard_hasPhoto","hasImage","updatePhoto","uri","message","state","set","add","toastManager","appearance","hits","prevProps","prevState","results","driveTime","weather","weatherPenalty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport WelcomePageContent from './welcome.component';\nimport { withWebId } from '@inrupt/solid-react-components';\nimport data from '@solid/query-ldflex';\nimport { withToastManager } from 'react-toast-notifications';\n\nconst defaultProfilePhoto = '/img/icon/empty-profile.svg';\n\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\nclass WelcomeComponent extends Component<Props> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false,\n      hits:[]\n    };\n  }\n  \n  componentDidMount() {\n    if (this.props.webId) {\n      this.getProfileData();\n    }\n  }//componentDidMount()\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.webId && this.props.webId !== prevProps.webId) {\n      this.getProfileData();\n    }\n  }\n\n  /**\n   * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n   *\n   * This is an example of how to use the LDFlex library to fetch different linked data fields.\n   */\n  getProfileData = async () => {\n    this.setState({ isLoading: true });\n    let hasImage;\n\n    /*\n     * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n     * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n     * from the returned user object.\n     */\n    const user = data[this.props.webId];\n    const nameLd = await user.name;\n\n    const name = nameLd ? nameLd.value : '';\n\n    let imageLd = await user.image;\n    imageLd = imageLd ? imageLd : await user.vcard_hasPhoto;\n\n    let image;\n    if (imageLd && imageLd.value) {\n      image = imageLd.value;\n      hasImage = true;\n    } else {\n      hasImage = false;\n      image = defaultProfilePhoto;\n    }\n\n    this.setState({ name, image, isLoading: false, hasImage });\n  };\n\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n  updatePhoto = async (uri: String, message) => {\n    try {\n      const { user } = data;\n      this.state.hasImage\n        ? await user.image.set(uri)\n        : await user.image.add(uri);\n\n      this.props.toastManager.add(['', message], {\n        appearance: 'success'\n      });\n    } catch (error) {\n      this.props.toastManager.add(['Error', error.message], {\n        appearance: 'error'\n      });\n    }\n  };\n\n  render() {\n    const { name, image, isLoading,results,driveTime,weather,weatherPenalty } = this.state;\n\n    return (\n      <WelcomePageContent\n        name={name}\n        image={image}\n        isLoading={isLoading}\n        webId={this.props.webId}\n        updatePhoto={this.updatePhoto}\n        results={results}\n        driveTime={driveTime}\n        weather={weather}\n        weatherPenalty={weatherPenalty}\n        sliderVal={0}\n      />\n    );\n  }\n}\n\nexport default withWebId(withToastManager(WelcomeComponent));\n"]},"metadata":{},"sourceType":"module"}