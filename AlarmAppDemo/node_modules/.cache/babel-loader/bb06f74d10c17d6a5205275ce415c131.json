{"ast":null,"code":"var concatStream = require('concat-stream');\n\nvar contentTypeLookup = require('mime-types').contentType;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar Headers = require('node-fetch').Headers;\n\nvar ReadableError = require('readable-error');\n\nfunction text(stream) {\n  return new Promise(function (resolve, reject) {\n    stream.pipe(concatStream({\n      encoding: 'string'\n    }, resolve));\n    stream.on('error', reject);\n  });\n}\n\nfunction json(stream) {\n  return text(stream).then(function (text) {\n    return JSON.parse(text);\n  });\n}\n\nfunction response(status, body, headers) {\n  return {\n    status: status,\n    ok: status >= 200 && status <= 299,\n    headers: new Headers(headers),\n    body: body,\n    text: text.bind(null, body),\n    json: json.bind(null, body)\n  };\n}\n\nfunction fetch(iri, options) {\n  options = options || {};\n  options.method = (options.method || 'GET').toUpperCase();\n  options.contentTypeLookup = options.contentTypeLookup || contentTypeLookup;\n  var pathname = decodeURIComponent(url.parse(iri).pathname);\n\n  if (options.method === 'GET') {\n    return Promise.resolve(response(200, fs.createReadStream(pathname), {\n      'content-type': options.contentTypeLookup(path.extname(pathname))\n    }));\n  } else if (options.method === 'PUT') {\n    return new Promise(function (resolve) {\n      if (!options.body) {\n        return resolve(response(406, new ReadableError(new Error('body required'))));\n      }\n\n      options.body.pipe(fs.createWriteStream(pathname)).on('finish', function () {\n        resolve(response(201));\n      }).on('error', function (err) {\n        resolve(response(500, new ReadableError(err)));\n      });\n    });\n  } else {\n    return Promise.resolve(response(405, new ReadableError(new Error('method not allowed'))));\n  }\n}\n\nfetch.Headers = Headers;\nmodule.exports = fetch;","map":null,"metadata":{},"sourceType":"script"}