{"version":3,"file":"RegularFunctions.js","sourceRoot":"","sources":["../../../lib/functions/RegularFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import * as RDFDM from '@rdfjs/data-model';\nimport * as hash from 'create-hash';\nimport * as uuid from 'uuid';\n\nimport { Hash } from 'crypto';\nimport { Map } from 'immutable';\n\nimport * as E from '../expressions';\nimport * as C from '../util/Consts';\nimport * as Err from '../util/Errors';\nimport * as P from '../util/Parsing';\nimport * as X from './XPathFunctions';\n\nimport { TypeURL as Type } from '../util/Consts';\n\nimport { transformLiteral } from '../Transformation';\nimport { OverloadMap } from './FunctionClasses';\nimport { bool, declare, number, string } from './Helpers';\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions\n\n// ----------------------------------------------------------------------------\n// Operator Mapping\n// https://www.w3.org/TR/sparql11-query/#OperatorMapping\n// ----------------------------------------------------------------------------\n\nconst not = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((val: Term) => bool(!val.coerceEBV()))\n    .collect(),\n};\n\nconst unaryPlus = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => {\n      return number(val.typedValue, val.typeURL.value as Type);\n    })\n    .collect(),\n};\n\nconst unaryMinus = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => {\n      return number(-val.typedValue, val.typeURL.value as Type);\n    })\n    .collect(),\n};\n\nconst multiplication = {\n  arity: 2,\n  overloads: declare()\n    .arithmetic((left, right) => left * right)\n    .collect(),\n};\n\nconst division = {\n  arity: 2,\n  overloads: declare()\n    .arithmetic((left, right) => left / right)\n    .onBinaryTyped(['integer', 'integer'],\n      (left: number, right: number) => {\n        if (right === 0) {\n          throw new Err.ExpressionError('Integer division by 0');\n        }\n        return number(left / right, Type.XSD_DECIMAL);\n      })\n    .collect(),\n};\n\nconst addition = {\n  arity: 2,\n  overloads: declare()\n    .arithmetic((left, right) => left + right)\n    .collect(),\n};\n\nconst subtraction = {\n  arity: 2,\n  overloads: declare()\n    .arithmetic((left, right) => left - right)\n    .collect(),\n};\n\n// https://www.w3.org/TR/sparql11-query/#func-RDFterm-equal\nconst equality = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left === right)\n    .stringTest((left, right) => left.localeCompare(right) === 0)\n    .booleanTest((left, right) => left === right)\n    .dateTimeTest((left, right) => left.getTime() === right.getTime())\n    .set(['term', 'term'],\n      ([left, right]) => bool(RDFTermEqual(left, right)),\n    )\n    .collect(),\n};\n\nfunction RDFTermEqual(_left: Term, _right: Term) {\n  const left = _left.toRDF();\n  const right = _right.toRDF();\n  const val = left.equals(right);\n  if ((left.termType === 'Literal') && (right.termType === 'Literal')) {\n    throw new Err.RDFEqualTypeError([_left, _right]);\n  }\n  return val;\n}\n\nconst inequality = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left !== right)\n    .stringTest((left, right) => left.localeCompare(right) !== 0)\n    .booleanTest((left, right) => left !== right)\n    .dateTimeTest((left, right) => left.getTime() !== right.getTime())\n    .set(['term', 'term'],\n      ([left, right]) => bool(!RDFTermEqual(left, right)),\n    )\n    .collect(),\n};\n\nconst lesserThan = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left < right)\n    .stringTest((left, right) => left.localeCompare(right) === -1)\n    .booleanTest((left, right) => left < right)\n    .dateTimeTest((left, right) => left.getTime() < right.getTime())\n    .collect(),\n};\n\nconst greaterThan = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left > right)\n    .stringTest((left, right) => left.localeCompare(right) === 1)\n    .booleanTest((left, right) => left > right)\n    .dateTimeTest((left, right) => left.getTime() > right.getTime())\n    .collect(),\n};\n\nconst lesserThanEqual = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left <= right)\n    .stringTest((left, right) => left.localeCompare(right) !== 1)\n    .booleanTest((left, right) => left <= right)\n    .dateTimeTest((left, right) => left.getTime() <= right.getTime())\n    .collect(),\n};\n\nconst greaterThanEqual = {\n  arity: 2,\n  overloads: declare()\n    .numberTest((left, right) => left >= right)\n    .stringTest((left, right) => left.localeCompare(right) !== -1)\n    .booleanTest((left, right) => left >= right)\n    .dateTimeTest((left, right) => left.getTime() >= right.getTime())\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on RDF Terms\n// https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n// ----------------------------------------------------------------------------\n\nconst isIRI = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((term) => bool(term.termType === 'namedNode'))\n    .collect(),\n};\n\nconst isBlank = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((term) => bool(term.termType === 'blankNode'))\n    .collect(),\n};\n\nconst isLiteral = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((term) => bool(term.termType === 'literal'))\n    .collect(),\n};\n\nconst isNumeric = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((term) => bool(true))\n    .set(['nonlexical'], (term) => bool(false))\n    .collect(),\n};\n\nconst toString = {\n  arity: 1,\n  overloads: declare()\n    .onTerm1((term) => string(term.str()))\n    .collect(),\n};\n\nconst lang = {\n  arity: 1,\n  overloads: declare()\n    .onLiteral1((lit) => string(lit.language || ''))\n    .collect(),\n};\n\nconst datatype = {\n  arity: 1,\n  overloads: declare()\n    .onLiteral1(\n      (lit) => new E.NamedNode(lit.typeURL.value))\n    .collect(),\n};\n\n// https://www.w3.org/TR/sparql11-query/#func-iri\nconst IRI = {\n  arity: 1,\n  overloads: declare().unimplemented('IRI').collect(),\n};\n\n// https://www.w3.org/TR/sparql11-query/#func-bnode\n// id has to be distinct over all id's in dataset\nconst BNODE = {\n  arity: [0, 1],\n  overloads: declare()\n    // .set([], () => new E.BlankNode()) // TODO\n    .onString1Typed((val) => new E.BlankNode(val))\n    .collect(),\n};\n\nconst STRDT = {\n  arity: 2,\n  overloads: declare()\n    .onBinary(['string', 'namedNode'], (str: E.StringLiteral, iri: E.NamedNode) => {\n      const lit = RDFDM.literal(str.typedValue, RDFDM.namedNode(iri.value));\n      return transformLiteral(lit);\n    })\n    .collect(),\n};\n\nconst STRLANG = {\n  arity: 2,\n  overloads: declare()\n    .onBinaryTyped(['string', 'string'],\n      (val: string, language: string) => new E.LangStringLiteral(val, language))\n    .collect(),\n};\n\nconst UUID = {\n  arity: 0,\n  overloads: declare()\n    .set([], () => new E.NamedNode(`urn:uuid:${uuid.v4()}`))\n    .collect(),\n};\n\nconst STRUUID = {\n  arity: 0,\n  overloads: declare()\n    .set([], () => string(uuid.v4()))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on strings\n// https://www.w3.org/TR/sparql11-query/#func-forms\n// ----------------------------------------------------------------------------\n\nconst STRLEN = {\n  arity: 1,\n  overloads: declare()\n    .onLiteral1<string>((lit) => number(lit.typedValue.length, Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst SUBSTR = {\n  arity: [2, 3],\n  overloads: declare().unimplemented('SUBSTR').collect(),\n};\n\nconst UCASE = {\n  arity: 1,\n  overloads: declare().unimplemented('UCASE').collect(),\n};\n\nconst LCASE = {\n  arity: 1,\n  overloads: declare().unimplemented('LCASE').collect(),\n};\n\nconst STRSTARTS = {\n  arity: 2,\n  overloads: declare().unimplemented('STRSTARTS').collect(),\n};\n\nconst STRENDS = {\n  arity: 2,\n  overloads: declare().unimplemented('STRENDS').collect(),\n};\n\nconst CONTAINS = {\n  arity: 2,\n  overloads: declare().unimplemented('CONTAINS').collect(),\n};\n\nconst STRBEFORE = {\n  arity: 2,\n  overloads: declare().unimplemented('STRBEFORE').collect(),\n};\n\nconst STRAFTER = {\n  arity: 2,\n  overloads: declare().unimplemented('STRAFTER').collect(),\n};\n\nconst ENCODE_FOR_URI = {\n  arity: 1,\n  overloads: declare().unimplemented('ENCODE_FOR_URI').collect(),\n};\n\nconst CONCAT = {\n  arity: Infinity,\n  overloads: declare().unimplemented('CONCAT').collect(),\n};\n\nconst langmatches = {\n  arity: 2,\n  overloads: declare()\n    .onBinaryTyped(\n      ['string', 'string'],\n      (tag: string, range: string) => bool(X.langMatches(tag, range)),\n    ).collect(),\n};\n\nconst regex2 = (text: string, pattern: string) => bool(X.matches(text, pattern));\nconst regex3 = (text: string, pattern: string, flags: string) => bool(X.matches(text, pattern, flags));\nconst REGEX = {\n  arity: [2, 3],\n  overloads: declare()\n    .onBinaryTyped(['string', 'string'], regex2)\n    .onBinaryTyped(['langString', 'langString'], regex2)\n    .onTernaryTyped(['string', 'string', 'string'], regex3)\n    .onTernaryTyped(['langString', 'string', 'string'], regex3)\n    .collect(),\n};\n\nconst REPLACE = {\n  arity: [3, 4],\n  overloads: declare().unimplemented('REPLACE').collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on numerics\n// https://www.w3.org/TR/sparql11-query/#func-numerics\n// ----------------------------------------------------------------------------\n\nconst abs = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1(\n      (num) => number(Math.abs(num.typedValue), num.typeURL.value as C.TypeURL))\n    .collect(),\n};\n\nconst round = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1(\n      (num) => number(Math.round(num.typedValue), num.typeURL.value as C.TypeURL))\n    .collect(),\n};\n\nconst ceil = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1(\n      (num) => number(Math.ceil(num.typedValue), num.typeURL.value as C.TypeURL))\n    .collect(),\n};\n\nconst floor = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1(\n      (num) => number(Math.floor(num.typedValue), num.typeURL.value as C.TypeURL))\n    .collect(),\n};\n\nconst rand = {\n  arity: 0,\n  overloads: declare()\n    .set([], () => number(Math.random(), Type.XSD_DOUBLE))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on Dates and Times\n// https://www.w3.org/TR/sparql11-query/#func-date-time\n// ----------------------------------------------------------------------------\n\nfunction parseDate(dateLit: E.DateTimeLiteral): P.SplittedDate {\n  // TODO: This is assuming datelits always have a string\n  return P.parseXSDDateTime(dateLit.strValue);\n}\n\nconst now = {\n  arity: 0,\n  overloads: declare().unimplemented('now').collect(),\n};\n\nconst year = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).year), Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst month = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).month), Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst day = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).day), Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst hours = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).hours), Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst minutes = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).minutes), Type.XSD_INTEGER))\n    .collect(),\n};\n\nconst seconds = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => number(Number(parseDate(date).seconds), Type.XSD_DECIMAL))\n    .collect(),\n};\n\nconst timezone = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => {\n        const duration = X.formatDayTimeDuration(parseDate(date).timezone);\n        if (!duration) {\n          throw new Err.InvalidTimezoneCall(date.strValue);\n        }\n        return new E.Literal(duration, C.make(Type.XSD_DAYTIME_DURATION), duration);\n      },\n    )\n    .collect(),\n};\n\nconst tz = {\n  arity: 1,\n  overloads: declare()\n    .onDateTime1(\n      (date) => string(parseDate(date).timezone))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Hash functions\n// https://www.w3.org/TR/sparql11-query/#func-hash\n// ----------------------------------------------------------------------------\n\nconst MD5 = {\n  arity: 1,\n  overloads: declare()\n    .onString1Typed((str) => string(hash('md5').update(str).digest('hex')))\n    .collect(),\n};\n\nconst SHA1 = {\n  arity: 1,\n  overloads: declare()\n    .onString1Typed((str) => string(hash('sha1').update(str).digest('hex')))\n    .collect(),\n};\n\nconst SHA256 = {\n  arity: 1,\n  overloads: declare()\n    .onString1Typed((str) => string(hash('sha256').update(str).digest('hex')))\n    .collect(),\n};\n\nconst SHA384 = {\n  arity: 1,\n  overloads: declare()\n    .onString1Typed((str) => string(hash('sha384').update(str).digest('hex')))\n    .collect(),\n};\n\nconst SHA512 = {\n  arity: 1,\n  overloads: declare()\n    .onString1Typed((str) => string(hash('sha512').update(str).digest('hex')))\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\n/*\n * Collect all the definitions from above into an object\n */\nconst _definitions: { [key in C.RegularOperator]: Definition } = {\n  // --------------------------------------------------------------------------\n  // Operator Mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  // --------------------------------------------------------------------------\n  '!': not,\n  'UPLUS': unaryPlus,\n  'UMINUS': unaryMinus,\n  '*': multiplication,\n  '/': division,\n  '+': addition,\n  '-': subtraction,\n  '=': equality,\n  '!=': inequality,\n  '<': lesserThan,\n  '>': greaterThan,\n  '<=': lesserThanEqual,\n  '>=': greaterThanEqual,\n\n  // --------------------------------------------------------------------------\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  // --------------------------------------------------------------------------\n  'isiri': isIRI,\n  'isblank': isBlank,\n  'isliteral': isLiteral,\n  'isnumeric': isNumeric,\n  'str': toString,\n  'lang': lang,\n  'datatype': datatype,\n  'iri': IRI,\n  'uri': IRI,\n  'BNODE': BNODE,\n  'strdt': STRDT,\n  'strlang': STRLANG,\n  'uuid': UUID,\n  'struuid': STRUUID,\n\n  // --------------------------------------------------------------------------\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // --------------------------------------------------------------------------\n  'strlen': STRLEN,\n  'substr': SUBSTR,\n  'ucase': UCASE,\n  'lcase': LCASE,\n  'strstarts': STRSTARTS,\n  'strends': STRENDS,\n  'contains': CONTAINS,\n  'strbefore': STRBEFORE,\n  'strafter': STRAFTER,\n  'encode_for_uri': ENCODE_FOR_URI,\n  'concat': CONCAT,\n  'langmatches': langmatches,\n  'regex': REGEX,\n  'replace': REPLACE,\n\n  // --------------------------------------------------------------------------\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  // --------------------------------------------------------------------------\n  'abs': abs,\n  'round': round,\n  'ceil': ceil,\n  'floor': floor,\n  'rand': rand,\n\n  // --------------------------------------------------------------------------\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // --------------------------------------------------------------------------\n  'now': now,\n  'year': year,\n  'month': month,\n  'day': day,\n  'hours': hours,\n  'minutes': minutes,\n  'seconds': seconds,\n  'timezone': timezone,\n  'tz': tz,\n\n  // --------------------------------------------------------------------------\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  // --------------------------------------------------------------------------\n  'md5': MD5,\n  'sha1': SHA1,\n  'sha256': SHA256,\n  'sha384': SHA384,\n  'sha512': SHA512,\n};\n\n// ----------------------------------------------------------------------------\n// The definitions and functionality for all operators\n// ----------------------------------------------------------------------------\n\nexport interface Definition {\n  arity: number | number[];\n  overloads: OverloadMap;\n}\n\nexport const definitions = Map<C.RegularOperator, Definition>(_definitions);\n"]}